// Generated by view binder compiler. Do not edit!
package com.jrutkin.listwiz.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.jrutkin.listwiz.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentTaskBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView TaskFragTVTaskDesc;

  @NonNull
  public final TextView TaskFragTVTaskName;

  @NonNull
  public final TextView TaskFragment;

  @NonNull
  public final ConstraintLayout frameLayout;

  private FragmentTaskBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView TaskFragTVTaskDesc, @NonNull TextView TaskFragTVTaskName,
      @NonNull TextView TaskFragment, @NonNull ConstraintLayout frameLayout) {
    this.rootView = rootView;
    this.TaskFragTVTaskDesc = TaskFragTVTaskDesc;
    this.TaskFragTVTaskName = TaskFragTVTaskName;
    this.TaskFragment = TaskFragment;
    this.frameLayout = frameLayout;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentTaskBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentTaskBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_task, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentTaskBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.TaskFragTVTaskDesc;
      TextView TaskFragTVTaskDesc = ViewBindings.findChildViewById(rootView, id);
      if (TaskFragTVTaskDesc == null) {
        break missingId;
      }

      id = R.id.TaskFragTVTaskName;
      TextView TaskFragTVTaskName = ViewBindings.findChildViewById(rootView, id);
      if (TaskFragTVTaskName == null) {
        break missingId;
      }

      id = R.id.TaskFragment;
      TextView TaskFragment = ViewBindings.findChildViewById(rootView, id);
      if (TaskFragment == null) {
        break missingId;
      }

      ConstraintLayout frameLayout = (ConstraintLayout) rootView;

      return new FragmentTaskBinding((ConstraintLayout) rootView, TaskFragTVTaskDesc,
          TaskFragTVTaskName, TaskFragment, frameLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
